version: '3.8'

services:
  bot:
    build:
      context: .
      dockerfile: Dockerfile.new
    container_name: miHoYo_Bot_SQLite
    command: python -m discord_bot.bot_new
    environment:
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_WEBHOOK=${DISCORD_WEBHOOK}
      - DB_PATH=/app/data/mihoyo_bot.db
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - TIMEZONE=${TIMEZONE:-UTC}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-false}
    volumes:
      - .:/app
      - mihoyo_data:/app/data  # Persistent volume for SQLite database
      - mihoyo_logs:/app/logs  # Persistent volume for logs
    restart: always
    healthcheck:
      test: ["CMD", "python", "-c", "import sqlite3; sqlite3.connect('/app/data/mihoyo_bot.db').execute('SELECT 1')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mihoyo_network

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile-cron.new
    container_name: miHoYo_CheckIn_Scheduler_SQLite
    environment:
      - DB_PATH=/app/data/mihoyo_bot.db
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - TIMEZONE=${TIMEZONE:-UTC}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CHECKIN_CRON_SCHEDULE=${CHECKIN_CRON_SCHEDULE:-5 23 * * *}
    volumes:
      - .:/app
      - mihoyo_data:/app/data  # Shared database volume
      - mihoyo_logs:/app/logs  # Shared logs volume
    depends_on:
      bot:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "pgrep", "cron"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mihoyo_network

  # Optional: Database admin interface for SQLite
  db_admin:
    image: coleifer/sqlite-web
    container_name: miHoYo_DB_Admin
    command: sqlite_web -H 0.0.0.0 -x /data/mihoyo_bot.db
    ports:
      - "8080:8080"
    volumes:
      - mihoyo_data:/data
    restart: unless-stopped
    profiles:
      - admin  # Only start with: docker-compose --profile admin up
    networks:
      - mihoyo_network

  # Optional: PostgreSQL for larger deployments (4GB+ RAM)
  postgres:
    image: postgres:15-alpine
    container_name: miHoYo_PostgreSQL
    environment:
      - POSTGRES_DB=${DB_NAME:-mihoyo_bot}
      - POSTGRES_USER=${DB_USER:-mihoyo_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    profiles:
      - postgres  # Only start with: docker-compose --profile postgres up
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-mihoyo_user} -d ${DB_NAME:-mihoyo_bot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mihoyo_network

volumes:
  mihoyo_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data  # Local directory for SQLite database
  mihoyo_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs  # Local directory for logs
  postgres_data:  # For PostgreSQL profile

networks:
  mihoyo_network:
    driver: bridge